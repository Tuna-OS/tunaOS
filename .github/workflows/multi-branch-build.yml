name: Multi-Branch Build Dispatcher

on:
  schedule:
    # Run at 1:30 AM UTC every Tuesday (30 minutes after individual builds to avoid conflicts)
    - cron: "30 1 * * TUE"
  workflow_dispatch:
    inputs:
      branches:
        description: 'Branches to build (comma-separated, or "all" for all target branches)'
        required: false
        default: 'all'
        type: string
      variant:
        description: 'Build variant (regular, dx, gdx, all)'
        required: false
        default: 'all'
        type: choice
        options:
        - regular
        - dx
        - gdx
        - all

jobs:
  trigger-builds:
    runs-on: ubuntu-latest
    name: Trigger builds on multiple branches
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        
      - name: Determine branches to build
        id: branches
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.branches }}" == "all" ]]; then
              BRANCHES="yellowfin albacore albacore-server bluefin-tuna bluefin"
            else
              # Replace commas with spaces for proper parsing
              BRANCHES="${{ inputs.branches }}"
              BRANCHES="${BRANCHES//,/ }"
            fi
          else
            # For scheduled builds, build all target branches
            BRANCHES="yellowfin albacore albacore-server bluefin-tuna bluefin"
          fi
          
          # Convert to JSON array for matrix
          BRANCH_ARRAY="["
          for branch in $BRANCHES; do
            # Trim whitespace
            branch=$(echo "$branch" | xargs)
            BRANCH_ARRAY="$BRANCH_ARRAY\"$branch\","
          done
          BRANCH_ARRAY="${BRANCH_ARRAY%,}]"
          
          echo "branches=$BRANCH_ARRAY" >> $GITHUB_OUTPUT
          echo "Building branches: $BRANCHES"
          
      - name: Trigger unified build for each branch
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branches = ${{ steps.branches.outputs.branches }};
            const variant = '${{ inputs.variant || 'all' }}';
            
            console.log(`Triggering builds for branches: ${branches.join(', ')}`);
            console.log(`Variant: ${variant}`);
            
            const promises = branches.map(async (branch) => {
              try {
                console.log(`Triggering build for branch: ${branch}`);
                const response = await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'build-unified.yml',
                  ref: branch,
                  inputs: {
                    variant: variant
                  }
                });
                console.log(`✅ Successfully triggered build for ${branch}`);
                return { branch, success: true };
              } catch (error) {
                console.error(`❌ Failed to trigger build for ${branch}:`, error.message);
                return { branch, success: false, error: error.message };
              }
            });
            
            const results = await Promise.all(promises);
            
            const successful = results.filter(r => r.success);
            const failed = results.filter(r => !r.success);
            
            console.log(`\n📊 Summary:`);
            console.log(`✅ Successful: ${successful.length}`);
            console.log(`❌ Failed: ${failed.length}`);
            
            if (successful.length > 0) {
              console.log(`\n✅ Successfully triggered builds for: ${successful.map(r => r.branch).join(', ')}`);
            }
            
            if (failed.length > 0) {
              console.log(`\n❌ Failed to trigger builds for: ${failed.map(r => r.branch).join(', ')}`);
              failed.forEach(r => console.log(`  - ${r.branch}: ${r.error}`));
            }
            
            // Set job status based on results
            if (failed.length > 0) {
              core.setFailed(`Failed to trigger builds for ${failed.length} branches`);
            }