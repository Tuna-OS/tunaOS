name: Build Multi-Variant Images

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 * * TUE" # Every Tuesday at 1am UTC
  merge_group:
  workflow_dispatch:
    inputs:
      image_variant:
        description: 'Image variant to build (yellowfin, albacore, all)'
        required: false
        default: 'all'
        type: choice
        options:
        - yellowfin
        - albacore
        - all
      build_variant:
        description: 'Build variant (regular, dx, gdx, all)'
        required: false
        default: 'regular'
        type: choice
        options:
        - regular
        - dx
        - gdx
        - all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.image_variant || 'auto' }}-${{ inputs.build_variant || 'auto' }}
  cancel-in-progress: true

jobs:
  # Generate build matrix for multi-variant builds
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout for config
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        
      - name: Generate multi-variant build matrix
        id: set-matrix
        run: |
          # Determine which image variants to build
          IMAGE_VARIANTS="yellowfin albacore"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.image_variant }}" != "all" ]]; then
              IMAGE_VARIANTS="${{ inputs.image_variant }}"
            fi
          fi
          
          # Determine which build variants to build
          BUILD_VARIANTS="regular"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ inputs.build_variant }}" == "all" ]]; then
              BUILD_VARIANTS="regular dx gdx"
            elif [[ "${{ inputs.build_variant }}" != "regular" ]]; then
              BUILD_VARIANTS="${{ inputs.build_variant }}"
            fi
          elif [[ "${{ github.event_name }}" != "pull_request" ]]; then
            # For scheduled/push builds, build all variants
            BUILD_VARIANTS="regular dx gdx"
          fi
          
          # Generate matrix
          MATRIX="{\"include\":[]}"
          for image_variant in $IMAGE_VARIANTS; do
            for build_variant in $BUILD_VARIANTS; do
              # Set variant-specific values
              case "$build_variant" in
                regular)
                  VARIANT_SUFFIX=""
                  DX="0"
                  GDX="0"
                  ;;
                dx)
                  VARIANT_SUFFIX="-dx"
                  DX="1"
                  GDX="0"
                  ;;
                gdx)
                  VARIANT_SUFFIX="-gdx"
                  DX="0"
                  GDX="1"
                  ;;
              esac
              
              # Set image-specific values
              case "$image_variant" in
                yellowfin)
                  MAJOR_VERSION="10"
                  BASE_IMAGE_TAG="10"
                  DESCRIPTION="🐠 Based on AlmaLinux Kitten 10"
                  ;;
                albacore)
                  MAJOR_VERSION="10"
                  BASE_IMAGE_TAG="10.0"
                  DESCRIPTION="🐟 Based on AlmaLinux 10.0"
                  ;;
              esac
              
              # Determine image name and tag
              if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                IMAGE_NAME="pr-${{ github.event.pull_request.number }}-${image_variant}${VARIANT_SUFFIX}"
                TAG="pr-${{ github.event.pull_request.number }}"
              else
                IMAGE_NAME="${image_variant}${VARIANT_SUFFIX}"
                TAG="${MAJOR_VERSION}"
              fi
              
              # Add to matrix
              MATRIX="$(echo "${MATRIX}" | jq ".include += [{
                \"image_variant\": \"${image_variant}\",
                \"build_variant\": \"${build_variant}\",
                \"image_name\": \"${IMAGE_NAME}\",
                \"major_version\": \"${MAJOR_VERSION}\",
                \"base_image_tag\": \"${BASE_IMAGE_TAG}\",
                \"default_tag\": \"${TAG}\",
                \"platforms\": \"linux/arm64,linux/amd64\",
                \"description\": \"${DESCRIPTION}\",
                \"dx\": \"${DX}\",
                \"gdx\": \"${GDX}\",
                \"rechunk\": ${{ github.event_name != 'pull_request' }},
                \"sbom\": ${{ github.event_name != 'pull_request' }},
                \"publish\": ${{ github.event_name != 'pull_request' }}
              }]")"
            done
          done
          
          echo "matrix=$(echo "${MATRIX}" | jq -c '.')" >> $GITHUB_OUTPUT

  # Build images using the reusable workflow
  build:
    needs: generate_matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate_matrix.outputs.matrix)}}
    uses: ./.github/workflows/reusable-build-image.yml
    secrets: inherit
    with:
      image-name: ${{ matrix.image_name }}
      image-desc: ${{ matrix.description }}
      image-variant: ${{ matrix.image_variant }}
      flavor: ${{ matrix.build_variant }}
      platforms: ${{ matrix.platforms }}
      major-version: ${{ matrix.major_version }}
      default-tag: ${{ matrix.default_tag }}
      rechunk: ${{ matrix.rechunk }}
      sbom: ${{ matrix.sbom }}
      publish: ${{ matrix.publish }}